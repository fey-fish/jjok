[manifest]
version = "0.1.0"
dump_lua = true
priority = 0

# Fixing description error when info_queue has multi-box descriptions.
#massive thanks to bepisfever <3
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''
args.AUT.multi_box = {}
'''
position = "at"
payload = '''
if not args.is_info_queue then
    args.AUT.multi_box = {} 
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
if _c.specific_vars then specific_vars = _c.specific_vars end
'''
position = "before"
payload = '''
local is_info_queue = false
if specific_vars and specific_vars.is_info_queue then is_info_queue = true; specific_vars = nil end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
for _, v in ipairs(info_queue) do
  generate_card_ui(v, full_UI_table)
end
'''
position = "at"
payload = '''
for _, v in ipairs(info_queue) do
  generate_card_ui(v, full_UI_table, {is_info_queue = true})
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = '''
local target = {
  type = 'descriptions',
  key = self.key,
  set = self.set,
  nodes = desc_nodes,
  AUT = full_UI_table,
  vars = 
      specific_vars or {}
}
'''
position = "after"
payload = '''
if target.vars.is_info_queue then target.is_info_queue = true; target.vars.is_info_queue = nil end
'''
match_indent = true

# info_queue supporting stylized names.
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''
scale =  (0.55 - 0.004*#(final_name_assembled_string or assembled_string))*(part.control.s and tonumber(part.control.s) or args.scale  or 1)
'''
position = "at"
payload = '''
scale =  (0.55 - 0.004*#(final_name_assembled_string or assembled_string))*(part.control.s and tonumber(part.control.s) or args.scale  or 1)*(args.fixed_scale or 1)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = '''
bump = true,
silent = true,
pop_in = 0,
pop_in_rate = 4,
maxw = 5,
shadow = true,
y_offset = -0.6,
spacing = math.max(0, 0.32*(17 - #(final_name_assembled_string or assembled_string))),
'''
position = "at"
payload = '''
bump = not args.no_bump,
silent = not args.no_silent,
pop_in = (not args.no_pop_in and (args.pop_in or 0)) or nil,
pop_in_rate = (not args.no_pop_in and (args.pop_in_rate or 4)) or nil,
maxw = args.maxw or 5,
shadow = not args.no_shadow,
y_offset = args.y_offset or -0.6,
spacing = (not args.no_spacing and math.max(0, 0.32*(17 - #(final_name_assembled_string or assembled_string)))) or nil,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
desc_nodes.name = localize{type = 'name_text', key = name_override or _c.key, set = name_override and 'Other' or _c.set} 
'''
position = "after"
payload = '''
local set = name_override and "Other" or _c.set
local key = name_override or _c.key
if set == "Seal" then
  if G.localization.descriptions["Other"][_c.key.."_seal"] then set = "Other"; key = key.."_seal" end
else
  if not G.localization.descriptions[set][_c.key] then set = "Other" end
end
desc_nodes.loc_name = {}
localize{type = 'name', key = key, set = set, nodes = desc_nodes.loc_name, fixed_scale = 0.63, no_pop_in = true, no_shadow = true, y_offset = 0, no_spacing = true, no_bump = true, vars = (_c.create_fake_card and _c.loc_vars and (_c:loc_vars(info_queue, _c:create_fake_card()) or {}).vars) or {colours = {}}} 
desc_nodes.loc_name = info_queue_desc_from_rows(desc_nodes.loc_name, true)
desc_nodes.loc_name.config.align = "cm"
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
_c:generate_ui(info_queue, card, desc_nodes, specific_vars, full_UI_table)
'''
position = "before"
payload = '''
local specific_vars = specific_vars or {}
if is_info_queue then specific_vars.is_info_queue = true end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
_c:generate_ui(info_queue, card, desc_nodes, specific_vars, full_UI_table)
'''
position = "after"
payload = '''
if is_info_queue then
  desc_nodes.loc_name = {}
  local set = name_override and "Other" or _c.set
  local key = name_override or _c.key
  if set == "Seal" then
    if G.localization.descriptions["Other"][_c.key.."_seal"] then set = "Other"; key = key.."_seal" end
  else
    if not G.localization.descriptions[set] or not G.localization.descriptions[set][_c.key] then set = "Other" end
  end
  localize{type = 'name', key = key, set = set, nodes = desc_nodes.loc_name, fixed_scale = 0.63, no_pop_in = true, no_shadow = true, y_offset = 0, no_spacing = true, no_bump = true, vars = (_c.create_fake_card and _c.loc_vars and (_c:loc_vars(info_queue, _c:create_fake_card()) or {}).vars) or {colours = {}}} 
  desc_nodes.loc_name = info_queue_desc_from_rows(desc_nodes.loc_name, true)
  desc_nodes.loc_name.config.align = "cm"
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
function info_tip_from_rows(desc_nodes, name)
'''
position = "after"
payload = '''
  local name_nodes = {}
  local function deep_find(t, index)
    if t[index] then return true end
    for i,v in pairs(t) do
      if i == index then return true end
      if type(v) == "table" then
        return deep_find(v, index)
      end
    end
    return false
  end
  if not desc_nodes.loc_name or not deep_find(desc_nodes.loc_name, "object") then
    name_nodes = {{n=G.UIT.T, config={text = name, scale = 0.32, colour = G.C.UI.TEXT_LIGHT}}}
  else
    name_nodes = {desc_nodes.loc_name}
  end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
function desc_from_rows(desc_nodes, empty, maxw)
'''
position = "before"
payload = '''
function info_queue_desc_from_rows(desc_nodes, empty, maxw)
  local t = {}
  for k, v in ipairs(desc_nodes) do
    t[#t+1] = {n=G.UIT.R, config={align = "cm", maxw = maxw}, nodes=v}
  end
  return {n=G.UIT.R, config={align = "cm", colour = desc_nodes.background_colour or empty and G.C.CLEAR or G.C.UI.BACKGROUND_WHITE, r = 0.1, emboss = not empty and 0.05 or nil, filler = true, main_box_flag = desc_nodes.main_box_flag and true or nil}, nodes={
    {n=G.UIT.R, config={align = "cm"}, nodes=t}
  }}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
{n=G.UIT.R, config={align = "tm", minh = 0.36, padding = 0.03}, nodes={{n=G.UIT.T, config={text = name, scale = 0.32, colour = G.C.UI.TEXT_LIGHT}}}},
'''
position = "at"
payload = '''
{n=G.UIT.R, config={align = "tm", minh = 0.36, padding = 0.03}, nodes=name_nodes},
'''
match_indent = true